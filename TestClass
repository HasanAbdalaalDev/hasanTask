package com.hasanabdalaal.sudokugrid.Model;
public class TestSudoku {

    public static int[][] SOLVE = {
            {9,0,0,1,0,0,0,0,5},
            {0,0,5,0,9,0,2,0,1},
            {8,0,0,0,4,0,0,0,0},
            {0,0,0,0,8,0,0,0,0},
            {0,0,0,7,0,0,0,0,0},
            {0,0,0,0,2,6,0,0,9},
            {2,0,0,3,0,0,0,0,6},
            {0,0,0,2,0,0,9,0,0},
            {0,0,1,9,0,4,5,7,0},
    };

    private int[][] board;
    public static final int EMPTY = 0;
    public static final int SIZE = 9;
    public TestSudoku(){

    }
    public int getSize(){
        return SOLVE.length;
    }
    public TestSudoku(int[][] board) {
//        this.board = new int[][];
//
//        for (int i = 0; i < SIZE; i++) {
//            for (int j = 0; j < SIZE; j++) {
//                this.board[i][j] = board[i][j];
//            }
//        }
    }
    public int getItems(int x,int y){
      return SOLVE[x][y];
    }


    private boolean isInRow(int row, int number) {
        for (int i = 0; i < SIZE; i++)
            if (SOLVE[row][i] == number)
                return true;

        return false;
    }

    

    // i check if a possible number is in its 3x3 box
    private boolean isInBox(int row, int col, int number) {
        int r = row - row % 3;
        int c = col - col % 3;

        for (int i = r; i < r + 3; i++)
            for (int j = c; j < c + 3; j++)
                if (SOLVE[i][j] == number)
                    return true;

        return false;
    }


    private boolean isOk(int row, int col, int number) {
        return !isInRow(row, number)  &&  !isInCol(col, number)  &&  !isInBox(row, col, number);
    }


    public boolean solve() {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {

                if (SOLVE[row][col] == EMPTY) {

                    for (int number = 1; number <= SIZE; number++) {
                        if (isOk(row, col, number)) {

                            SOLVE[row][col] = number;

                            if (solve()) {
                                return true;
                            } else {
                                SOLVE[row][col] = EMPTY;
                            }
                        }
                    }

                    return false;
                }
            }
        }

        return true; 
    }

  

    public int[][] PrintToText(){
     return SOLVE;
    }
    
   /* public static void main(String[] args) {
		Sudoku sudoku = new Sudoku(GRID_TO_SOLVE);
		System.out.println("Sudoku grid to solve");
		sudoku.display();
		
		// we try resolution
		if (sudoku.solve()) {
			System.out.println("Sudoku Grid solved with simple BT");
			sudoku.display();
		} else {
			System.out.println("Unsolvable");
		}
	}*/
}
